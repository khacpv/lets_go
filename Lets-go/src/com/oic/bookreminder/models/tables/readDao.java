package com.oic.bookreminder.models.tables;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.oic.bookreminder.models.tables.read;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table READ.
*/
public class readDao extends AbstractDao<read, Long> {

    public static final String TABLENAME = "READ";

    /**
     * Properties of entity read.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property BookId = new Property(1, long.class, "bookId", false, "BOOK_ID");
        public final static Property Page = new Property(2, Integer.class, "page", false, "PAGE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property CreatedDate = new Property(4, java.util.Date.class, "createdDate", false, "CREATED_DATE");
    };

    private Query<read> book_ReadListQuery;

    public readDao(DaoConfig config) {
        super(config);
    }
    
    public readDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'READ' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'BOOK_ID' INTEGER NOT NULL ," + // 1: bookId
                "'PAGE' INTEGER," + // 2: page
                "'CONTENT' TEXT," + // 3: content
                "'CREATED_DATE' INTEGER);"); // 4: createdDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'READ'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, read entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBookId());
 
        Integer page = entity.getPage();
        if (page != null) {
            stmt.bindLong(3, page);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        java.util.Date createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindLong(5, createdDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public read readEntity(Cursor cursor, int offset) {
        read entity = new read( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // bookId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // page
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // createdDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, read entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookId(cursor.getLong(offset + 1));
        entity.setPage(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatedDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(read entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(read entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "readList" to-many relationship of book. */
    public List<read> _queryBook_ReadList(long bookId) {
        synchronized (this) {
            if (book_ReadListQuery == null) {
                QueryBuilder<read> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BookId.eq(null));
                book_ReadListQuery = queryBuilder.build();
            }
        }
        Query<read> query = book_ReadListQuery.forCurrentThread();
        query.setParameter(0, bookId);
        return query.list();
    }

}
