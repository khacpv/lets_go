package com.oic.bookreminder.models.tables;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.oic.bookreminder.models.tables.note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOTE.
*/
public class noteDao extends AbstractDao<note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property BookId = new Property(1, long.class, "bookId", false, "BOOK_ID");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property CreatedDate = new Property(3, java.util.Date.class, "createdDate", false, "CREATED_DATE");
        public final static Property Complete = new Property(4, Boolean.class, "complete", false, "COMPLETE");
        public final static Property IsReading = new Property(5, Boolean.class, "isReading", false, "IS_READING");
    };

    private Query<note> book_NoteListQuery;

    public noteDao(DaoConfig config) {
        super(config);
    }
    
    public noteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'BOOK_ID' INTEGER NOT NULL ," + // 1: bookId
                "'CONTENT' TEXT," + // 2: content
                "'CREATED_DATE' INTEGER," + // 3: createdDate
                "'COMPLETE' INTEGER," + // 4: complete
                "'IS_READING' INTEGER);"); // 5: isReading
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBookId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        java.util.Date createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindLong(4, createdDate.getTime());
        }
 
        Boolean complete = entity.getComplete();
        if (complete != null) {
            stmt.bindLong(5, complete ? 1l: 0l);
        }
 
        Boolean isReading = entity.getIsReading();
        if (isReading != null) {
            stmt.bindLong(6, isReading ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public note readEntity(Cursor cursor, int offset) {
        note entity = new note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // bookId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // createdDate
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // complete
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // isReading
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookId(cursor.getLong(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreatedDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setComplete(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setIsReading(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "noteList" to-many relationship of book. */
    public List<note> _queryBook_NoteList(long bookId) {
        synchronized (this) {
            if (book_NoteListQuery == null) {
                QueryBuilder<note> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BookId.eq(null));
                book_NoteListQuery = queryBuilder.build();
            }
        }
        Query<note> query = book_NoteListQuery.forCurrentThread();
        query.setParameter(0, bookId);
        return query.list();
    }

}
