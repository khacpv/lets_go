package com.oic.bookreminder.models.tables;

import android.database.sqlite.SQLiteDatabase;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import java.util.Map;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig userDaoConfig;
    private final DaoConfig notificationDaoConfig;
    private final DaoConfig bookDaoConfig;
    private final DaoConfig commentDaoConfig;
    private final DaoConfig askDaoConfig;
    private final DaoConfig exchangeDaoConfig;
    private final DaoConfig userBookDaoConfig;

    private final UserDao userDao;
    private final NotificationDao notificationDao;
    private final BookDao bookDao;
    private final CommentDao commentDao;
    private final AskDao askDao;
    private final ExchangeDao exchangeDao;
    private final UserBookDao userBookDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        notificationDaoConfig = daoConfigMap.get(NotificationDao.class).clone();
        notificationDaoConfig.initIdentityScope(type);

        bookDaoConfig = daoConfigMap.get(BookDao.class).clone();
        bookDaoConfig.initIdentityScope(type);

        commentDaoConfig = daoConfigMap.get(CommentDao.class).clone();
        commentDaoConfig.initIdentityScope(type);

        askDaoConfig = daoConfigMap.get(AskDao.class).clone();
        askDaoConfig.initIdentityScope(type);

        exchangeDaoConfig = daoConfigMap.get(ExchangeDao.class).clone();
        exchangeDaoConfig.initIdentityScope(type);

        userBookDaoConfig = daoConfigMap.get(UserBookDao.class).clone();
        userBookDaoConfig.initIdentityScope(type);

        userDao = new UserDao(userDaoConfig, this);
        notificationDao = new NotificationDao(notificationDaoConfig, this);
        bookDao = new BookDao(bookDaoConfig, this);
        commentDao = new CommentDao(commentDaoConfig, this);
        askDao = new AskDao(askDaoConfig, this);
        exchangeDao = new ExchangeDao(exchangeDaoConfig, this);
        userBookDao = new UserBookDao(userBookDaoConfig, this);

        registerDao(User.class, userDao);
        registerDao(Notification.class, notificationDao);
        registerDao(Book.class, bookDao);
        registerDao(Comment.class, commentDao);
        registerDao(Ask.class, askDao);
        registerDao(Exchange.class, exchangeDao);
        registerDao(UserBook.class, userBookDao);
    }
    
    public void clear() {
        userDaoConfig.getIdentityScope().clear();
        notificationDaoConfig.getIdentityScope().clear();
        bookDaoConfig.getIdentityScope().clear();
        commentDaoConfig.getIdentityScope().clear();
        askDaoConfig.getIdentityScope().clear();
        exchangeDaoConfig.getIdentityScope().clear();
        userBookDaoConfig.getIdentityScope().clear();
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public NotificationDao getNotificationDao() {
        return notificationDao;
    }

    public BookDao getBookDao() {
        return bookDao;
    }

    public CommentDao getCommentDao() {
        return commentDao;
    }

    public AskDao getAskDao() {
        return askDao;
    }

    public ExchangeDao getExchangeDao() {
        return exchangeDao;
    }

    public UserBookDao getUserBookDao() {
        return userBookDao;
    }

}
