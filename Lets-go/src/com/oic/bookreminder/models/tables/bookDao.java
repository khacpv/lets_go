package com.oic.bookreminder.models.tables;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.oic.bookreminder.models.tables.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOOK.
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property Isbn = new Property(3, String.class, "isbn", false, "ISBN");
        public final static Property Cost = new Property(4, String.class, "cost", false, "COST");
        public final static Property TotalPages = new Property(5, Integer.class, "totalPages", false, "TOTAL_PAGES");
        public final static Property CreatedDate = new Property(6, java.util.Date.class, "createdDate", false, "CREATED_DATE");
        public final static Property ClientUserId = new Property(7, long.class, "clientUserId", false, "CLIENT_USER_ID");
    };

    private DaoSession daoSession;

    private Query<Book> user_BookListQuery;

    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOOK' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'AUTHOR' TEXT," + // 2: author
                "'ISBN' TEXT," + // 3: isbn
                "'COST' TEXT," + // 4: cost
                "'TOTAL_PAGES' INTEGER," + // 5: totalPages
                "'CREATED_DATE' INTEGER," + // 6: createdDate
                "'CLIENT_USER_ID' INTEGER NOT NULL );"); // 7: clientUserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String isbn = entity.getIsbn();
        if (isbn != null) {
            stmt.bindString(4, isbn);
        }
 
        String cost = entity.getCost();
        if (cost != null) {
            stmt.bindString(5, cost);
        }
 
        Integer totalPages = entity.getTotalPages();
        if (totalPages != null) {
            stmt.bindLong(6, totalPages);
        }
 
        java.util.Date createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindLong(7, createdDate.getTime());
        }
        stmt.bindLong(8, entity.getClientUserId());
    }

    @Override
    protected void attachEntity(Book entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // isbn
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cost
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // totalPages
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // createdDate
            cursor.getLong(offset + 7) // clientUserId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsbn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCost(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTotalPages(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCreatedDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setClientUserId(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "bookList" to-many relationship of User. */
    public List<Book> _queryUser_BookList(long clientUserId) {
        synchronized (this) {
            if (user_BookListQuery == null) {
                QueryBuilder<Book> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ClientUserId.eq(null));
                user_BookListQuery = queryBuilder.build();
            }
        }
        Query<Book> query = user_BookListQuery.forCurrentThread();
        query.setParameter(0, clientUserId);
        return query.list();
    }

}
